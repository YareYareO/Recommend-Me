@using Microsoft.AspNetCore.Html;
@model RecMe.Pages.Things.IndexModel

@{
    string[] colors = { "#ffffff"};
    IHtmlContent CreateComponentAndChildren(Models.Tag rootTag, string color)
    {
        Models.Tag[] childrenList = ListChildren(rootTag);
        string idattribute = "taggroup" + rootTag.Id.ToString();
        string rootcomponentHtml = CreateSelectComponent(rootTag, color);
        string toggleButtonHtml = "";
        string childrenHtml = "";

        if (childrenList.Length > 0)
        {
            toggleButtonHtml = CreateToggleButton(idattribute, rootTag.Name);
            childrenHtml = GetRecursiveHTMLOfChildren(childrenList, color);
        }

        var ret = $@"
    <div class='searchcontainer'>
    {rootcomponentHtml} 
        {toggleButtonHtml}
    <div id='{idattribute}' class='taggroup' style='display: none;'> 
        {childrenHtml} 
    </div>
    </div>";

        return Html.Raw(ret);
    }

    Models.Tag[] ListChildren(Models.Tag parentTag)
    {
        List<Models.Tag> children = new List<Models.Tag>();
        foreach (var tag in Model.Tag) // might want to make a copy of model.tag and make it smaller in the next foreach loop so that it doesnt iterate through the whole thing over and over.
        {
            if (tag.ParentId == parentTag.Id)
            {
                children.Add(tag);
            }
        }
        return children.ToArray();
    }

    string CreateSelectComponent(Models.Tag tag, string color)
    {
        var news = $@"
                <div class='selectbutton pure-button' style='background-color: {color}'>
                    <label class='form-check-label selectbuttonlabel'>
                    <input class='form-check-input' name='ChosenTags' type='checkbox' value='{tag.Name}'>
                    {tag.Name}</label>
                </div>
            ";

        return news;
    }

    string CreateToggleButton(string attribute, string tagname)
    {
        var button = $@"
        <label class='togglebutton'>
          <input type='checkbox' checked='checked' onchange='ToggleButtonVisibility({attribute})'>
          <div class='line'></div>
          <div class='line line-indicator'></div>
        </label>";

        return button;
    }

    string GetRecursiveHTMLOfChildren(Models.Tag[] list, string color)
    {
        string childrenHtml = "";
        foreach (var child in list)
        {
            childrenHtml += CreateComponentAndChildren(child, color);
        }
        return childrenHtml;
    }

}

<form method="post">
    @foreach (var tag in Model.Tag)
    {
        if(tag.ParentId == 1)
        {
            string randomcolor = colors[new Random().Next(colors.Length)];
            @CreateComponentAndChildren(tag, randomcolor);
        }
    }
    Sort by: Upvotes <input type="radio" asp-for="SortBy" id="SortBy" value="Upvotes" />
    New             <input type="radio" asp-for="SortBy" id="SortBy" value="New" /><br />

    <input type="submit" class="pure-button" value="Search" />
</form>
